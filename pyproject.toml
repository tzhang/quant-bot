[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "quant-trading-system"
version = "1.0.0"
description = "量化交易系统"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name = "Quant Team", email = "team@quantsystem.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
]
keywords = ["quantitative", "trading", "finance", "investment", "backtest"]

[project.urls]
Homepage = "https://github.com/your-org/quant-trading-system"
Repository = "https://github.com/your-org/quant-trading-system.git"
Documentation = "https://quant-trading-system.readthedocs.io"
"Bug Tracker" = "https://github.com/your-org/quant-trading-system/issues"

# Black代码格式化配置
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded by ^/ will apply only to files and directories
# in the root of the project.
(
  ^/venv/          # exclude venv directory
  | ^/build/       # exclude build directory
  | ^/dist/        # exclude dist directory
  | migrations/    # exclude migrations
)
'''

# isort导入排序配置
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
skip_glob = ["venv/*", "build/*", "dist/*"]
known_first_party = ["src"]
known_third_party = [
    "pandas",
    "numpy",
    "scipy",
    "sklearn",
    "matplotlib",
    "seaborn",
    "plotly",
    "yfinance",
    "sqlalchemy",
    "redis",
    "fastapi",
    "streamlit",
    "pytest",
    "loguru"
]

# MyPy类型检查配置
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
color_output = true
error_summary = true

# 模块特定配置
[[tool.mypy.overrides]]
module = [
    "yfinance.*",
    "talib.*",
    "plotly.*",
    "streamlit.*",
    "redis.*",
    "sklearn.*",
    "scipy.*",
    "numba.*",
    "quantlib.*",
    "zipline.*",
    "empyrical.*",
    "arch.*"
]
ignore_missing_imports = true

# Flake8代码检查配置
[tool.flake8]
max-line-length = 88
select = ["E", "W", "F", "C"]
ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "C901",  # too complex (we'll handle this case by case)
]
exclude = [
    ".git",
    "__pycache__",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    "migrations"
]
max-complexity = 10
max-cognitive-complexity = 12

# Coverage.py配置
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/migrations/*",
    "setup.py",
    "conftest.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod"
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit安全检查配置
[tool.bandit]
exclude_dirs = ["tests", "venv", "build", "dist"]
skips = ["B101", "B601"]  # 跳过assert和shell注入检查（在测试中常用）

# Pytest配置（补充）
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: 单元测试",
    "integration: 集成测试",
    "slow: 慢速测试",
    "fast: 快速测试",
    "data: 数据相关测试",
    "backtest: 回测相关测试",
    "performance: 性能测试",
    "api: API测试",
    "database: 数据库测试",
    "redis: Redis测试",
    "external: 外部依赖测试"
]

# Setuptools配置
[tool.setuptools]
packages = ["src"]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json", "*.toml"]

# 开发依赖
[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "coverage>=7.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "coverage>=7.0.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0"
]