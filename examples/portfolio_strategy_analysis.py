#!/usr/bin/env python3
"""
ÊäïËµÑÁªÑÂêàÁ≠ñÁï•ÂàÜÊûêÂ∑•ÂÖ∑
Âü∫‰∫éÁî®Êà∑ÂÆûÈôÖÊåÅ‰ªìÂà∂ÂÆöÊú™Êù•3‰∏™ÊúàÁöÑ‰∫§ÊòìÁ≠ñÁï•

‰ΩúËÄÖ: Quant Bot
Êó•Êúü: 2025-01-05
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# ËÆæÁΩÆ‰∏≠ÊñáÂ≠ó‰Ωì
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS', 'SimHei', 'DejaVu Sans']
plt.rcParams['axes.unicode_minus'] = False

class PortfolioStrategyAnalyzer:
    def __init__(self):
        """ÂàùÂßãÂåñÊäïËµÑÁªÑÂêàÁ≠ñÁï•ÂàÜÊûêÂô®"""
        # Áî®Êà∑ÂΩìÂâçÊåÅ‰ªìÔºàÂü∫‰∫éÊèê‰æõÁöÑÊà™ÂõæÊï∞ÊçÆÔºâ
        self.current_holdings = {
            'HUBS': {'shares': 10, 'current_price': 452.60, 'change': 7.44, 'change_pct': 1.67},
            'MDB': {'shares': 1, 'current_price': 320.00, 'change': -6.29, 'change_pct': -1.93},
            'NIO': {'shares': 78, 'current_price': 7.68, 'change': -0.21, 'change_pct': -2.66},
            'OKTA': {'shares': 5, 'current_price': 93.45, 'change': -1.47, 'change_pct': -1.55},
            'TSLA': {'shares': 6, 'current_price': 429.90, 'change': -6.10, 'change_pct': -1.40}
        }
        
        # ËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØ
        self.stock_info = {
            'HUBS': {'name': 'HubSpot', 'sector': 'Technology', 'industry': 'Software'},
            'MDB': {'name': 'MongoDB', 'sector': 'Technology', 'industry': 'Software'},
            'NIO': {'name': 'NIO Inc', 'sector': 'Consumer Cyclical', 'industry': 'Auto Manufacturers'},
            'OKTA': {'name': 'Okta', 'sector': 'Technology', 'industry': 'Software'},
            'TSLA': {'name': 'Tesla', 'sector': 'Consumer Cyclical', 'industry': 'Auto Manufacturers'}
        }
        
        self.symbols = list(self.current_holdings.keys())
        
    def calculate_portfolio_value(self):
        """ËÆ°ÁÆóÊäïËµÑÁªÑÂêàÊÄª‰ª∑ÂÄº"""
        total_value = 0
        portfolio_details = {}
        
        for symbol, holding in self.current_holdings.items():
            market_value = holding['shares'] * holding['current_price']
            total_value += market_value
            
            portfolio_details[symbol] = {
                'shares': holding['shares'],
                'price': holding['current_price'],
                'market_value': market_value,
                'daily_pnl': holding['shares'] * holding['change'],
                'weight': 0  # Â∞ÜÂú®ÂêéÈù¢ËÆ°ÁÆó
            }
        
        # ËÆ°ÁÆóÊùÉÈáç
        for symbol in portfolio_details:
            portfolio_details[symbol]['weight'] = portfolio_details[symbol]['market_value'] / total_value
            
        return total_value, portfolio_details
    
    def fetch_historical_data(self, period='1y'):
        """Ëé∑ÂèñÂéÜÂè≤Êï∞ÊçÆ"""
        print("üìä Ëé∑ÂèñÂéÜÂè≤Â∏ÇÂú∫Êï∞ÊçÆ...")
        
        data = {}
        for symbol in self.symbols:
            try:
                ticker = yf.Ticker(symbol)
                hist = ticker.history(period=period)
                data[symbol] = hist
                print(f"‚úÖ {symbol}: Ëé∑Âèñ {len(hist)} Â§©Êï∞ÊçÆ")
            except Exception as e:
                print(f"‚ùå {symbol}: Êï∞ÊçÆËé∑ÂèñÂ§±Ë¥• - {e}")
                
        return data
    
    def calculate_technical_indicators(self, data):
        """ËÆ°ÁÆóÊäÄÊúØÊåáÊ†á"""
        print("üìà ËÆ°ÁÆóÊäÄÊúØÊåáÊ†á...")
        
        indicators = {}
        
        for symbol, df in data.items():
            if df.empty:
                continue
                
            # ÁßªÂä®Âπ≥ÂùáÁ∫ø
            df['MA20'] = df['Close'].rolling(window=20).mean()
            df['MA50'] = df['Close'].rolling(window=50).mean()
            df['MA200'] = df['Close'].rolling(window=200).mean()
            
            # RSI
            delta = df['Close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            df['RSI'] = 100 - (100 / (1 + rs))
            
            # MACD
            exp1 = df['Close'].ewm(span=12).mean()
            exp2 = df['Close'].ewm(span=26).mean()
            df['MACD'] = exp1 - exp2
            df['MACD_Signal'] = df['MACD'].ewm(span=9).mean()
            
            # Â∏ÉÊûóÂ∏¶
            df['BB_Middle'] = df['Close'].rolling(window=20).mean()
            bb_std = df['Close'].rolling(window=20).std()
            df['BB_Upper'] = df['BB_Middle'] + (bb_std * 2)
            df['BB_Lower'] = df['BB_Middle'] - (bb_std * 2)
            
            # Ê≥¢Âä®Áéá
            df['Volatility'] = df['Close'].pct_change().rolling(window=20).std() * np.sqrt(252)
            
            indicators[symbol] = df
            
        return indicators
    
    def analyze_risk_metrics(self, data):
        """ÂàÜÊûêÈ£éÈô©ÊåáÊ†á"""
        print("‚ö†Ô∏è ÂàÜÊûêÊäïËµÑÁªÑÂêàÈ£éÈô©...")
        
        risk_metrics = {}
        
        for symbol, df in data.items():
            if df.empty:
                continue
                
            returns = df['Close'].pct_change().dropna()
            
            # Âü∫Êú¨È£éÈô©ÊåáÊ†á
            annual_return = returns.mean() * 252
            annual_volatility = returns.std() * np.sqrt(252)
            sharpe_ratio = annual_return / annual_volatility if annual_volatility > 0 else 0
            
            # VaR (95%)
            var_95 = np.percentile(returns, 5)
            
            # ÊúÄÂ§ßÂõûÊí§
            cumulative = (1 + returns).cumprod()
            rolling_max = cumulative.expanding().max()
            drawdown = (cumulative - rolling_max) / rolling_max
            max_drawdown = drawdown.min()
            
            # Beta (Áõ∏ÂØπ‰∫éSPY)
            try:
                spy = yf.Ticker('SPY').history(period='1y')['Close'].pct_change().dropna()
                if len(spy) > 0 and len(returns) > 0:
                    # ÂØπÈΩêÊï∞ÊçÆ
                    common_dates = returns.index.intersection(spy.index)
                    if len(common_dates) > 20:
                        stock_returns = returns.loc[common_dates]
                        market_returns = spy.loc[common_dates]
                        beta = np.cov(stock_returns, market_returns)[0, 1] / np.var(market_returns)
                    else:
                        beta = 1.0
                else:
                    beta = 1.0
            except:
                beta = 1.0
            
            risk_metrics[symbol] = {
                'annual_return': annual_return,
                'annual_volatility': annual_volatility,
                'sharpe_ratio': sharpe_ratio,
                'var_95': var_95,
                'max_drawdown': max_drawdown,
                'beta': beta,
                'current_rsi': df['RSI'].iloc[-1] if 'RSI' in df.columns else 50
            }
            
        return risk_metrics
    
    def generate_sector_analysis(self):
        """ÁîüÊàêË°å‰∏öÂàÜÊûê"""
        print("üè≠ ÂàÜÊûêË°å‰∏öÂàÜÂ∏É...")
        
        total_value, portfolio_details = self.calculate_portfolio_value()
        
        sector_allocation = {}
        for symbol, details in portfolio_details.items():
            sector = self.stock_info[symbol]['sector']
            if sector not in sector_allocation:
                sector_allocation[sector] = {'weight': 0, 'value': 0, 'stocks': []}
            
            sector_allocation[sector]['weight'] += details['weight']
            sector_allocation[sector]['value'] += details['market_value']
            sector_allocation[sector]['stocks'].append(symbol)
        
        return sector_allocation, total_value, portfolio_details
    
    def generate_trading_signals(self, indicators, risk_metrics):
        """ÁîüÊàê‰∫§Êòì‰ø°Âè∑"""
        print("üéØ ÁîüÊàê‰∫§Êòì‰ø°Âè∑...")
        
        signals = {}
        
        for symbol in self.symbols:
            if symbol not in indicators or symbol not in risk_metrics:
                continue
                
            df = indicators[symbol]
            risk = risk_metrics[symbol]
            
            # Ëé∑ÂèñÊúÄÊñ∞Êï∞ÊçÆ
            current_price = df['Close'].iloc[-1]
            ma20 = df['MA20'].iloc[-1]
            ma50 = df['MA50'].iloc[-1]
            ma200 = df['MA200'].iloc[-1]
            rsi = risk['current_rsi']
            macd = df['MACD'].iloc[-1]
            macd_signal = df['MACD_Signal'].iloc[-1]
            
            # ÊäÄÊúØ‰ø°Âè∑ËØÑÂàÜ
            technical_score = 0
            
            # ÁßªÂä®Âπ≥ÂùáÁ∫ø‰ø°Âè∑
            if current_price > ma20 > ma50:
                technical_score += 2
            elif current_price > ma20:
                technical_score += 1
            elif current_price < ma20:
                technical_score -= 1
                
            # RSI‰ø°Âè∑
            if rsi < 30:
                technical_score += 2  # Ë∂ÖÂçñ
            elif rsi < 40:
                technical_score += 1
            elif rsi > 70:
                technical_score -= 2  # Ë∂Ö‰π∞
            elif rsi > 60:
                technical_score -= 1
                
            # MACD‰ø°Âè∑
            if macd > macd_signal:
                technical_score += 1
            else:
                technical_score -= 1
                
            # È£éÈô©Ë∞ÉÊï¥
            if risk['sharpe_ratio'] < 0:
                technical_score -= 2
            elif risk['max_drawdown'] < -0.3:
                technical_score -= 1
                
            # ÁîüÊàêÂª∫ËÆÆ
            if technical_score >= 3:
                action = "Âº∫ÁÉà‰π∞ÂÖ•"
                confidence = "È´ò"
            elif technical_score >= 1:
                action = "‰π∞ÂÖ•"
                confidence = "‰∏≠"
            elif technical_score >= -1:
                action = "ÊåÅÊúâ"
                confidence = "‰∏≠"
            elif technical_score >= -3:
                action = "ÂçñÂá∫"
                confidence = "‰∏≠"
            else:
                action = "Âº∫ÁÉàÂçñÂá∫"
                confidence = "È´ò"
                
            signals[symbol] = {
                'action': action,
                'confidence': confidence,
                'technical_score': technical_score,
                'current_price': current_price,
                'target_price': current_price * (1 + 0.1 * technical_score / 5),
                'stop_loss': current_price * 0.9,
                'reasons': []
            }
            
            # Ê∑ªÂä†ÂÖ∑‰ΩìÂéüÂõ†
            if rsi < 30:
                signals[symbol]['reasons'].append(f"RSIË∂ÖÂçñ({rsi:.1f})")
            elif rsi > 70:
                signals[symbol]['reasons'].append(f"RSIË∂Ö‰π∞({rsi:.1f})")
                
            if current_price > ma20 > ma50:
                signals[symbol]['reasons'].append("ÂùáÁ∫øÂ§öÂ§¥ÊéíÂàó")
            elif current_price < ma20 < ma50:
                signals[symbol]['reasons'].append("ÂùáÁ∫øÁ©∫Â§¥ÊéíÂàó")
                
            if risk['sharpe_ratio'] < 0:
                signals[symbol]['reasons'].append("Â§èÊôÆÊØîÁéá‰∏∫Ë¥ü")
                
        return signals
    
    def create_strategy_visualization(self, sector_allocation, portfolio_details, risk_metrics, signals):
        """ÂàõÂª∫Á≠ñÁï•ÂèØËßÜÂåñÂõæË°®"""
        print("üìä ÁîüÊàêÁ≠ñÁï•ÂàÜÊûêÂõæË°®...")
        
        # ËÆæÁΩÆÂõæË°®Ê†∑Âºè
        plt.style.use('default')
        fig = plt.figure(figsize=(20, 16))
        
        # 1. ÊäïËµÑÁªÑÂêàÂàÜÂ∏ÉÈ•ºÂõæ
        ax1 = plt.subplot(3, 3, 1)
        weights = [details['weight'] for details in portfolio_details.values()]
        labels = [f"{symbol}\n({weight:.1%})" for symbol, weight in 
                 zip(portfolio_details.keys(), weights)]
        colors = plt.cm.Set3(np.linspace(0, 1, len(labels)))
        
        wedges, texts, autotexts = ax1.pie(weights, labels=labels, autopct='%1.1f%%', 
                                          colors=colors, startangle=90)
        ax1.set_title('ÊäïËµÑÁªÑÂêàÂàÜÂ∏É', fontsize=14, fontweight='bold')
        
        # 2. Ë°å‰∏öÂàÜÂ∏É
        ax2 = plt.subplot(3, 3, 2)
        sector_weights = [allocation['weight'] for allocation in sector_allocation.values()]
        sector_labels = list(sector_allocation.keys())
        
        ax2.pie(sector_weights, labels=sector_labels, autopct='%1.1f%%', startangle=90)
        ax2.set_title('Ë°å‰∏öÂàÜÂ∏É', fontsize=14, fontweight='bold')
        
        # 3. È£éÈô©Êî∂ÁõäÊï£ÁÇπÂõæ
        ax3 = plt.subplot(3, 3, 3)
        returns = [risk_metrics[symbol]['annual_return'] * 100 for symbol in self.symbols 
                  if symbol in risk_metrics]
        volatilities = [risk_metrics[symbol]['annual_volatility'] * 100 for symbol in self.symbols 
                       if symbol in risk_metrics]
        
        scatter = ax3.scatter(volatilities, returns, s=100, alpha=0.7, c=range(len(returns)), cmap='viridis')
        
        for i, symbol in enumerate([s for s in self.symbols if s in risk_metrics]):
            ax3.annotate(symbol, (volatilities[i], returns[i]), 
                        xytext=(5, 5), textcoords='offset points', fontsize=10)
        
        ax3.set_xlabel('Âπ¥ÂåñÊ≥¢Âä®Áéá (%)')
        ax3.set_ylabel('Âπ¥ÂåñÊî∂ÁõäÁéá (%)')
        ax3.set_title('È£éÈô©Êî∂ÁõäÂàÜÂ∏É', fontsize=14, fontweight='bold')
        ax3.grid(True, alpha=0.3)
        
        # 4. Â§èÊôÆÊØîÁéáÂØπÊØî
        ax4 = plt.subplot(3, 3, 4)
        sharpe_ratios = [risk_metrics[symbol]['sharpe_ratio'] for symbol in self.symbols 
                        if symbol in risk_metrics]
        symbols_with_data = [symbol for symbol in self.symbols if symbol in risk_metrics]
        
        bars = ax4.bar(symbols_with_data, sharpe_ratios, 
                      color=['green' if sr > 0 else 'red' for sr in sharpe_ratios])
        ax4.set_title('Â§èÊôÆÊØîÁéáÂØπÊØî', fontsize=14, fontweight='bold')
        ax4.set_ylabel('Â§èÊôÆÊØîÁéá')
        ax4.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        ax4.tick_params(axis='x', rotation=45)
        
        # 5. ÊúÄÂ§ßÂõûÊí§ÂØπÊØî
        ax5 = plt.subplot(3, 3, 5)
        max_drawdowns = [risk_metrics[symbol]['max_drawdown'] * 100 for symbol in self.symbols 
                        if symbol in risk_metrics]
        
        bars = ax5.bar(symbols_with_data, max_drawdowns, color='red', alpha=0.7)
        ax5.set_title('ÊúÄÂ§ßÂõûÊí§ÂØπÊØî', fontsize=14, fontweight='bold')
        ax5.set_ylabel('ÊúÄÂ§ßÂõûÊí§ (%)')
        ax5.tick_params(axis='x', rotation=45)
        
        # 6. ‰∫§Êòì‰ø°Âè∑ÁÉ≠ÂäõÂõæ
        ax6 = plt.subplot(3, 3, 6)
        signal_scores = [signals[symbol]['technical_score'] for symbol in self.symbols 
                        if symbol in signals]
        signal_matrix = np.array(signal_scores).reshape(1, -1)
        
        im = ax6.imshow(signal_matrix, cmap='RdYlGn', aspect='auto', vmin=-5, vmax=5)
        ax6.set_xticks(range(len(symbols_with_data)))
        ax6.set_xticklabels(symbols_with_data, rotation=45)
        ax6.set_yticks([])
        ax6.set_title('ÊäÄÊúØ‰ø°Âè∑Âº∫Â∫¶', fontsize=14, fontweight='bold')
        
        # Ê∑ªÂä†È¢úËâ≤Êù°
        cbar = plt.colorbar(im, ax=ax6, orientation='horizontal', pad=0.1)
        cbar.set_label('‰ø°Âè∑Âº∫Â∫¶ (Ë¥üÂÄº=ÂçñÂá∫, Ê≠£ÂÄº=‰π∞ÂÖ•)')
        
        # 7. RSIÂàÜÂ∏É
        ax7 = plt.subplot(3, 3, 7)
        rsi_values = [risk_metrics[symbol]['current_rsi'] for symbol in self.symbols 
                     if symbol in risk_metrics]
        
        bars = ax7.bar(symbols_with_data, rsi_values)
        ax7.axhline(y=70, color='red', linestyle='--', alpha=0.7, label='Ë∂Ö‰π∞Á∫ø(70)')
        ax7.axhline(y=30, color='green', linestyle='--', alpha=0.7, label='Ë∂ÖÂçñÁ∫ø(30)')
        ax7.set_title('RSIÊåáÊ†áÂàÜÂ∏É', fontsize=14, fontweight='bold')
        ax7.set_ylabel('RSI')
        ax7.legend()
        ax7.tick_params(axis='x', rotation=45)
        
        # 8. BetaÁ≥ªÊï∞ÂØπÊØî
        ax8 = plt.subplot(3, 3, 8)
        betas = [risk_metrics[symbol]['beta'] for symbol in self.symbols 
                if symbol in risk_metrics]
        
        bars = ax8.bar(symbols_with_data, betas, 
                      color=['blue' if beta < 1 else 'orange' for beta in betas])
        ax8.axhline(y=1, color='black', linestyle='-', alpha=0.5, label='Â∏ÇÂú∫Beta=1')
        ax8.set_title('BetaÁ≥ªÊï∞ÂØπÊØî', fontsize=14, fontweight='bold')
        ax8.set_ylabel('Beta')
        ax8.legend()
        ax8.tick_params(axis='x', rotation=45)
        
        # 9. ÊäïËµÑÁªÑÂêà‰ª∑ÂÄºÂàÜÂ∏É
        ax9 = plt.subplot(3, 3, 9)
        values = [details['market_value'] for details in portfolio_details.values()]
        
        bars = ax9.bar(portfolio_details.keys(), values, color=colors[:len(values)])
        ax9.set_title('ÊåÅ‰ªìÂ∏ÇÂÄºÂàÜÂ∏É', fontsize=14, fontweight='bold')
        ax9.set_ylabel('Â∏ÇÂÄº ($)')
        ax9.tick_params(axis='x', rotation=45)
        
        # Ê†ºÂºèÂåñyËΩ¥ÊòæÁ§∫
        ax9.yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))
        
        plt.tight_layout()
        plt.savefig('portfolio_strategy_analysis.png', dpi=300, bbox_inches='tight')
        print("‚úÖ Á≠ñÁï•ÂàÜÊûêÂõæË°®Â∑≤‰øùÂ≠ò‰∏∫ 'portfolio_strategy_analysis.png'")
        
    def generate_strategy_report(self, sector_allocation, portfolio_details, risk_metrics, signals, total_value):
        """ÁîüÊàêÁ≠ñÁï•Êä•Âëä"""
        print("\n" + "="*80)
        print("üìä ÊäïËµÑÁªÑÂêàÁ≠ñÁï•ÂàÜÊûêÊä•Âëä")
        print("="*80)
        
        # ÊäïËµÑÁªÑÂêàÊ¶ÇËßà
        print(f"\nüí∞ ÊäïËµÑÁªÑÂêàÊ¶ÇËßà:")
        print(f"ÊÄªÂ∏ÇÂÄº: ${total_value:,.2f}")
        print(f"ÊåÅ‰ªìËÇ°Á•®Êï∞: {len(self.current_holdings)}")
        
        daily_pnl = sum([details['daily_pnl'] for details in portfolio_details.values()])
        print(f"‰ªäÊó•Áõà‰∫è: ${daily_pnl:+,.2f}")
        
        # Ë°å‰∏öÂàÜÂ∏É
        print(f"\nüè≠ Ë°å‰∏öÂàÜÂ∏É:")
        for sector, allocation in sector_allocation.items():
            print(f"  {sector}: {allocation['weight']:.1%} (${allocation['value']:,.2f})")
            print(f"    ÂåÖÂê´ËÇ°Á•®: {', '.join(allocation['stocks'])}")
        
        # ‰∏™ËÇ°ÂàÜÊûê
        print(f"\nüìà ‰∏™ËÇ°ËØ¶ÁªÜÂàÜÊûê:")
        for symbol in self.symbols:
            if symbol in risk_metrics and symbol in signals:
                risk = risk_metrics[symbol]
                signal = signals[symbol]
                holding = self.current_holdings[symbol]
                
                print(f"\n  {symbol} ({self.stock_info[symbol]['name']}):")
                print(f"    ÂΩìÂâç‰ª∑Ê†º: ${holding['current_price']:.2f} ({holding['change']:+.2f}, {holding['change_pct']:+.2f}%)")
                print(f"    ÊåÅ‰ªìÊï∞Èáè: {holding['shares']} ËÇ°")
                print(f"    Â∏ÇÂÄº: ${holding['shares'] * holding['current_price']:,.2f}")
                print(f"    Âπ¥ÂåñÊî∂ÁõäÁéá: {risk['annual_return']*100:+.1f}%")
                print(f"    Âπ¥ÂåñÊ≥¢Âä®Áéá: {risk['annual_volatility']*100:.1f}%")
                print(f"    Â§èÊôÆÊØîÁéá: {risk['sharpe_ratio']:.2f}")
                print(f"    ÊúÄÂ§ßÂõûÊí§: {risk['max_drawdown']*100:.1f}%")
                print(f"    BetaÁ≥ªÊï∞: {risk['beta']:.2f}")
                print(f"    RSI: {risk['current_rsi']:.1f}")
                print(f"    ‰∫§ÊòìÂª∫ËÆÆ: {signal['action']} (‰ø°ÂøÉÂ∫¶: {signal['confidence']})")
                print(f"    ÁõÆÊ†á‰ª∑Ê†º: ${signal['target_price']:.2f}")
                print(f"    Ê≠¢Êçü‰ª∑Ê†º: ${signal['stop_loss']:.2f}")
                if signal['reasons']:
                    print(f"    ÁêÜÁî±: {', '.join(signal['reasons'])}")
        
        # È£éÈô©ËØÑ‰º∞
        print(f"\n‚ö†Ô∏è ÊäïËµÑÁªÑÂêàÈ£éÈô©ËØÑ‰º∞:")
        avg_volatility = np.mean([risk_metrics[symbol]['annual_volatility'] 
                                 for symbol in self.symbols if symbol in risk_metrics])
        avg_sharpe = np.mean([risk_metrics[symbol]['sharpe_ratio'] 
                             for symbol in self.symbols if symbol in risk_metrics])
        
        print(f"  Âπ≥ÂùáÂπ¥ÂåñÊ≥¢Âä®Áéá: {avg_volatility*100:.1f}%")
        print(f"  Âπ≥ÂùáÂ§èÊôÆÊØîÁéá: {avg_sharpe:.2f}")
        
        # Ë°å‰∏öÈõÜ‰∏≠Â∫¶È£éÈô©
        max_sector_weight = max([allocation['weight'] for allocation in sector_allocation.values()])
        if max_sector_weight > 0.6:
            print(f"  ‚ö†Ô∏è Ë°å‰∏öÈõÜ‰∏≠Â∫¶È£éÈô©: Âçï‰∏ÄË°å‰∏öÂç†ÊØî{max_sector_weight:.1%}ÔºåÂª∫ËÆÆÂàÜÊï£ÊäïËµÑ")
        
        # ‰∏™ËÇ°ÈõÜ‰∏≠Â∫¶È£éÈô©
        max_stock_weight = max([details['weight'] for details in portfolio_details.values()])
        if max_stock_weight > 0.4:
            print(f"  ‚ö†Ô∏è ‰∏™ËÇ°ÈõÜ‰∏≠Â∫¶È£éÈô©: Âçï‰∏ÄËÇ°Á•®Âç†ÊØî{max_stock_weight:.1%}ÔºåÂª∫ËÆÆÈôç‰Ωé‰ªì‰Ωç")
        
        # 3‰∏™Êúà‰∫§ÊòìÁ≠ñÁï•
        print(f"\nüéØ Êú™Êù•3‰∏™Êúà‰∫§ÊòìÁ≠ñÁï•Âª∫ËÆÆ:")
        
        # Êåâ‰ø°Âè∑Âº∫Â∫¶ÂàÜÁ±ª
        strong_buy = [symbol for symbol, signal in signals.items() if signal['technical_score'] >= 3]
        buy = [symbol for symbol, signal in signals.items() if 1 <= signal['technical_score'] < 3]
        hold = [symbol for symbol, signal in signals.items() if -1 <= signal['technical_score'] < 1]
        sell = [symbol for symbol, signal in signals.items() if -3 <= signal['technical_score'] < -1]
        strong_sell = [symbol for symbol, signal in signals.items() if signal['technical_score'] < -3]
        
        if strong_buy:
            print(f"  üü¢ Âº∫ÁÉà‰π∞ÂÖ•: {', '.join(strong_buy)}")
            print(f"     Âª∫ËÆÆ: Â¢ûÂä†‰ªì‰ΩçÔºåÂàÜÊâπ‰π∞ÂÖ•")
        
        if buy:
            print(f"  üü° ‰π∞ÂÖ•: {', '.join(buy)}")
            print(f"     Âª∫ËÆÆ: ÈÄÇÂ∫¶Â¢û‰ªì")
        
        if hold:
            print(f"  üîµ ÊåÅÊúâ: {', '.join(hold)}")
            print(f"     Âª∫ËÆÆ: Áª¥ÊåÅÁé∞Êúâ‰ªì‰ΩçÔºåËßÇÂØüÂ∏ÇÂú∫ÂèòÂåñ")
        
        if sell:
            print(f"  üü† ÂçñÂá∫: {', '.join(sell)}")
            print(f"     Âª∫ËÆÆ: ÂáèÂ∞ë‰ªì‰ΩçÔºåÂàÜÊâπÂçñÂá∫")
        
        if strong_sell:
            print(f"  üî¥ Âº∫ÁÉàÂçñÂá∫: {', '.join(strong_sell)}")
            print(f"     Âª∫ËÆÆ: Â§ßÂπÖÂáè‰ªìÊàñÊ∏Ö‰ªì")
        
        # ÂÖ∑‰ΩìÊìç‰ΩúÂª∫ËÆÆ
        print(f"\nüìã ÂÖ∑‰ΩìÊìç‰ΩúÂª∫ËÆÆ:")
        print(f"  1. Áü≠Êúü(1‰∏™ÊúàÂÜÖ):")
        for symbol, signal in signals.items():
            if signal['technical_score'] >= 2:
                print(f"     ‚Ä¢ {symbol}: ËÄÉËôëÂ¢û‰ªì10-20%")
            elif signal['technical_score'] <= -2:
                print(f"     ‚Ä¢ {symbol}: ËÄÉËôëÂáè‰ªì20-30%")
        
        print(f"  2. ‰∏≠Êúü(1-3‰∏™Êúà):")
        print(f"     ‚Ä¢ ÂÖ≥Ê≥®Ë°å‰∏öËΩÆÂä®ÔºåÁßëÊäÄËÇ°ÂèØËÉΩÈù¢‰∏¥Ë∞ÉÊï¥")
        print(f"     ‚Ä¢ Êñ∞ËÉΩÊ∫êÊ±ΩËΩ¶ÊùøÂùóÊ≥¢Âä®ËæÉÂ§ßÔºåÊ≥®ÊÑèÈ£éÈô©ÊéßÂà∂")
        print(f"     ‚Ä¢ Âª∫ËÆÆËÆæÁΩÆÊ≠¢Êçü‰ΩçÔºåÊéßÂà∂ÂçïÁ¨îÊçüÂ§±Âú®10%‰ª•ÂÜÖ")
        
        print(f"  3. È£éÈô©ÁÆ°ÁêÜ:")
        print(f"     ‚Ä¢ Âª∫ËÆÆ‰øùÊåÅ20-30%ÁöÑÁé∞Èáë‰ªì‰Ωç")
        print(f"     ‚Ä¢ Âçï‰∏ÄËÇ°Á•®‰ªì‰Ωç‰∏çË∂ÖËøáÊÄªËµÑ‰∫ßÁöÑ25%")
        print(f"     ‚Ä¢ ÂÆöÊúüÈáçÊñ∞Âπ≥Ë°°ÊäïËµÑÁªÑÂêà")
        
        print("\n" + "="*80)
        print("‚úÖ Á≠ñÁï•ÂàÜÊûêÂÆåÊàê!")
        print("="*80)

def main():
    """‰∏ªÂáΩÊï∞"""
    print("üöÄ ÂêØÂä®ÊäïËµÑÁªÑÂêàÁ≠ñÁï•ÂàÜÊûê...")
    
    # ÂàõÂª∫ÂàÜÊûêÂô®
    analyzer = PortfolioStrategyAnalyzer()
    
    # ËÆ°ÁÆóÊäïËµÑÁªÑÂêà‰ª∑ÂÄº
    total_value, portfolio_details = analyzer.calculate_portfolio_value()
    
    # Ëé∑ÂèñÂéÜÂè≤Êï∞ÊçÆ
    historical_data = analyzer.fetch_historical_data()
    
    # ËÆ°ÁÆóÊäÄÊúØÊåáÊ†á
    indicators = analyzer.calculate_technical_indicators(historical_data)
    
    # ÂàÜÊûêÈ£éÈô©ÊåáÊ†á
    risk_metrics = analyzer.analyze_risk_metrics(indicators)
    
    # ÁîüÊàêË°å‰∏öÂàÜÊûê
    sector_allocation, total_value, portfolio_details = analyzer.generate_sector_analysis()
    
    # ÁîüÊàê‰∫§Êòì‰ø°Âè∑
    signals = analyzer.generate_trading_signals(indicators, risk_metrics)
    
    # ÂàõÂª∫ÂèØËßÜÂåñÂõæË°®
    analyzer.create_strategy_visualization(sector_allocation, portfolio_details, risk_metrics, signals)
    
    # ÁîüÊàêÁ≠ñÁï•Êä•Âëä
    analyzer.generate_strategy_report(sector_allocation, portfolio_details, risk_metrics, signals, total_value)

if __name__ == "__main__":
    main()